---
import type { EntryFieldTypes } from "contentful";
import { contentfulClient } from "../lib/contentful";
import { ArrowBigLeftDash, ArrowBigRightDash, CirclePause, CirclePlay } from "lucide-astro";

// Interfaz para los datos de Contentful
interface Aliados {
    contentTypeId: "aliados";
    fields: {
        logosA: EntryFieldTypes.AssetLink[];
    };
}

// Obtener las entradas de Contentful
const { items: sponsorEntries } = await contentfulClient.getEntries<Aliados>({
  content_type: "aliados",
});

// Extraer la lista de logos de la primera entrada
const logosList = sponsorEntries[0]?.fields.logosA ?? [];
---

<section class="py-16 bg-gradient-to-br from-gray-50 to-white dark:from-gray-900 dark:to-gray-800">
  <div class="container mx-auto px-4">
    <!-- Header -->
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
        Nuestros Aliados Estrat√©gicos
      </h2>
      <p class="text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
        Colaboramos con las mejores organizaciones para ofrecer experiencias educativas de calidad mundial
      </p>
    </div>

    <!-- Carousel Container -->
    <div class="relative overflow-hidden">
      <!-- Gradient Overlays -->
      <div class="absolute left-0 top-0 bottom-0 w-20 bg-gradient-to-r from-gray-50 to-transparent dark:from-gray-900 z-10 pointer-events-none"></div>
      <div class="absolute right-0 top-0 bottom-0 w-20 bg-gradient-to-l from-gray-50 to-transparent dark:from-gray-900 z-10 pointer-events-none"></div>
      
      <!-- Carousel Track -->
      <div 
        id="partners-track" 
        class="flex gap-8 transition-transform duration-700 ease-in-out"
        style="transform: translateX(0px)"
      >
        {logosList.concat(logosList).map((logo, index) => (
          <div 
            class="flex-shrink-0 w-48 h-32 group cursor-pointer"
            data-partner-name={logo.fields.title}
          >
            <div class="relative w-full h-full bg-white dark:bg-gray-800 rounded-xl shadow-md hover:shadow-xl transition-all duration-300 group-hover:scale-105 border border-gray-200 dark:border-gray-700 overflow-hidden">
              <!-- Hover Overlay -->
              <div class="absolute inset-0 bg-gradient-to-t from-primary-600/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              
              <!-- Logo Container -->
              <div class="flex items-center justify-center h-full p-6">
                <img 
                  src={logo.fields.file.url}
                  alt={logo.fields.title}
                  class="max-w-full max-h-full object-contain filter grayscale group-hover:grayscale-0 transition-all duration-300"
                  loading="lazy"
                />
              </div>
              
              <!-- Partner Name Tooltip -->
              <div class="absolute -bottom-10 left-1/2 transform -translate-x-1/2 bg-gray-900 dark:bg-gray-700 text-white text-sm px-3 py-1 rounded-lg opacity-0 group-hover:opacity-100 transition-all duration-300 pointer-events-none whitespace-nowrap">
                {logo.fields.title}
                <div class="absolute -top-1 left-1/2 transform -translate-x-1/2 w-2 h-2 bg-gray-900 dark:bg-gray-700 rotate-45"></div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Navigation Controls -->
    <div class="flex justify-center items-center gap-4 mt-8">
      <button 
        id="prev-btn"
        class="p-3 rounded-full bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl border border-gray-200 dark:border-gray-700 text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-all duration-300 hover:scale-110"
        aria-label="Anterior"
      >
        <ArrowBigLeftDash class="h-5 w-5" />
      </button>
      
      <!-- Progress Indicators -->
      <div class="flex gap-2" id="indicators">
        {Array.from({ length: logosList.length }, (_, i) => (
          <button 
            class={`w-2 h-2 rounded-full transition-all duration-300 ${i === 0 ? 'bg-primary-600 w-8' : 'bg-gray-300 dark:bg-gray-600 hover:bg-primary-400'}`}
            data-slide={i}
            aria-label={`Ir al slide ${i + 1}`}
          ></button>
        ))}
      </div>
      
      <button 
        id="next-btn"
        class="p-3 rounded-full bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl border border-gray-200 dark:border-gray-700 text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-all duration-300 hover:scale-110"
        aria-label="Siguiente"
      >
        <ArrowBigRightDash class="h-5 w-5" />
      </button>
    </div>

    <!-- Pause/Play Control -->
    <div class="flex justify-center mt-4">
      <button 
        id="play-pause-btn"
        class="flex items-center gap-2 px-4 py-2 text-sm text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-300"
        aria-label="Pausar autoplay"
      >
        <CirclePause class="h-4 w-4" id="pause-icon" />
        <CirclePlay class="h-4 w-4 hidden" id="play-icon" />
        <span id="play-pause-text">Pausar</span>
      </button>
    </div>
  </div>
</section>

<script>
  class PartnersCarousel {
    private track: HTMLElement | null;
    private prevBtn: HTMLElement | null;
    private nextBtn: HTMLElement | null;
    private playPauseBtn: HTMLElement | null;
    private indicators: NodeListOf<HTMLElement>;
    private pauseIcon: HTMLElement | null;
    private playIcon: HTMLElement | null;
    private playPauseText: HTMLElement | null;
    
    private currentSlide: number = 0;
    private totalSlides: number;
    private slideWidth: number = 200; // 192px + 32px gap
    private isPlaying: boolean = true;
    private autoplayInterval: number | null = null;
    private touchStartX: number = 0;
    private touchEndX: number = 0;

    constructor() {
      this.track = document.getElementById('partners-track');
      this.prevBtn = document.getElementById('prev-btn');
      this.nextBtn = document.getElementById('next-btn');
      this.playPauseBtn = document.getElementById('play-pause-btn');
      this.indicators = document.querySelectorAll('[data-slide]');
      this.pauseIcon = document.getElementById('pause-icon');
      this.playIcon = document.getElementById('play-icon');
      this.playPauseText = document.getElementById('play-pause-text');
      
      this.totalSlides = this.indicators.length;
      
      this.init();
    }

    private init(): void {
      if (!this.track) return;

      // Event listeners
      this.prevBtn?.addEventListener('click', () => this.prevSlide());
      this.nextBtn?.addEventListener('click', () => this.nextSlide());
      this.playPauseBtn?.addEventListener('click', () => this.toggleAutoplay());
      
      // Indicator clicks
      this.indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => this.goToSlide(index));
      });

      // Touch events
      this.track.addEventListener('touchstart', (e) => this.handleTouchStart(e), { passive: true });
      this.track.addEventListener('touchend', (e) => this.handleTouchEnd(e), { passive: true });

      // Mouse events for desktop drag
      this.track.addEventListener('mousedown', (e) => this.handleMouseDown(e));
      
      // Pause on hover
      this.track.addEventListener('mouseenter', () => this.pauseAutoplay());
      this.track.addEventListener('mouseleave', () => this.resumeAutoplay());

      // Responsive handling
      window.addEventListener('resize', () => this.handleResize());
      
      this.startAutoplay();
      this.updateSlideWidth();
    }

    private updateSlideWidth(): void {
      const container = this.track?.parentElement;
      if (!container) return;
      
      const containerWidth = container.offsetWidth;
      const visibleSlides = Math.floor(containerWidth / 200);
      this.slideWidth = containerWidth / Math.max(visibleSlides, 1);
    }

    private goToSlide(index: number): void {
      this.currentSlide = index;
      this.updateCarousel();
    }

    private nextSlide(): void {
      this.currentSlide = (this.currentSlide + 1) % this.totalSlides;
      this.updateCarousel();
    }

    private prevSlide(): void {
      this.currentSlide = (this.currentSlide - 1 + this.totalSlides) % this.totalSlides;
      this.updateCarousel();
    }

    private updateCarousel(): void {
      if (!this.track) return;

      const translateX = -this.currentSlide * (this.slideWidth + 32); // 32px gap
      this.track.style.transform = `translateX(${translateX}px)`;
      
      this.updateIndicators();
    }

    private updateIndicators(): void {
      this.indicators.forEach((indicator, index) => {
        if (index === this.currentSlide) {
          indicator.className = 'w-8 h-2 rounded-full bg-primary-600 transition-all duration-300';
        } else {
          indicator.className = 'w-2 h-2 rounded-full bg-gray-300 dark:bg-gray-600 hover:bg-primary-400 transition-all duration-300';
        }
      });
    }

    private startAutoplay(): void {
      this.autoplayInterval = window.setInterval(() => {
        if (this.isPlaying) {
          this.nextSlide();
        }
      }, 4000);
    }

    private stopAutoplay(): void {
      if (this.autoplayInterval) {
        clearInterval(this.autoplayInterval);
        this.autoplayInterval = null;
      }
    }

    private toggleAutoplay(): void {
      this.isPlaying = !this.isPlaying;
      
      if (this.isPlaying) {
        this.pauseIcon?.classList.remove('hidden');
        this.playIcon?.classList.add('hidden');
        if (this.playPauseText) this.playPauseText.textContent = 'Pausar';
      } else {
        this.pauseIcon?.classList.add('hidden');
        this.playIcon?.classList.remove('hidden');
        if (this.playPauseText) this.playPauseText.textContent = 'Reproducir';
      }
    }

    private pauseAutoplay(): void {
      this.isPlaying = false;
    }

    private resumeAutoplay(): void {
      this.isPlaying = true;
    }

    private handleTouchStart(e: TouchEvent): void {
      this.touchStartX = e.changedTouches[0].screenX;
    }

    private handleTouchEnd(e: TouchEvent): void {
      this.touchEndX = e.changedTouches[0].screenX;
      this.handleSwipe();
    }

    private handleMouseDown(e: MouseEvent): void {
      this.touchStartX = e.screenX;
      
      const handleMouseMove = (moveEvent: MouseEvent) => {
        this.touchEndX = moveEvent.screenX;
      };
      
      const handleMouseUp = () => {
        this.handleSwipe();
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
      };
      
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    }

    private handleSwipe(): void {
      const swipeThreshold = 50;
      const diff = this.touchStartX - this.touchEndX;
      
      if (Math.abs(diff) > swipeThreshold) {
        if (diff > 0) {
          this.nextSlide();
        } else {
          this.prevSlide();
        }
      }
    }

    private handleResize(): void {
      this.updateSlideWidth();
      this.updateCarousel();
    }
  }

  // Initialize carousel when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new PartnersCarousel();
  });
</script>

<style>
  /* Custom scrollbar for touch devices */
  #partners-track {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  
  #partners-track::-webkit-scrollbar {
    display: none;
  }

  /* Smooth animations */
  @media (prefers-reduced-motion: reduce) {
    #partners-track {
      transition: none;
    }
    
    .group {
      transition: none;
    }
  }
</style>